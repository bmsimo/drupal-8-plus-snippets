{
	"Drupal Block": {
		"prefix": "dblock",
		"body": [
			"namespace Drupal\\\\${1:'nombre_del_modulo'}\\\\Plugin\\\\Block;",
			"",
			"use Drupal\\Core\\Block\\BlockBase;",
			"use Drupal\\Core\\Form\\FormStateInterface;",
			"use Drupal\\Core\\Plugin\\ContainerFactoryPluginInterface;",
			"use GuzzleHttp\\ClientInterface;",
			"use Symfony\\Component\\DependencyInjection\\ContainerInterface;",
			"",
			"/**",
			" * Provides a mapa block.",
			" *",
			" * @Block(",
			" *   id = \"${2:'UN_ID_UNICO'}\",",
			" *   admin_label = @Translation(\"$3\"),",
			" *   category = @Translation(\"$4\")",
			" * )",
			" */",
			"class ${TM_FILENAME:NombreDelArchivo} extends BlockBase implements ContainerFactoryPluginInterface {",
			"  /**",
			"   * The HTTP client.",
			"   *",
			"   * @var \\GuzzleHttp\\ClientInterface",
			"   */",
			"  protected ClientInterface $client;",
			"",
			"  /**",
			"   * Constructs a new MapaBlock instance.",
			"   *",
			"   * @param array $configuration",
			"   *   The plugin configuration, i.e. an array with configuration values keyed",
			"   *   by configuration option name. The special key 'context' may be used to",
			"   *   initialize the defined contexts by setting it to an array of context",
			"   *   values keyed by context names.",
			"   * @param string $plugin_id",
			"   *   The plugin_id for the plugin instance.",
			"   * @param mixed $plugin_definition",
			"   *   The plugin implementation definition.",
			"   * @param \\GuzzleHttp\\ClientInterface $client",
			"   *   The HTTP client.",
			"   */",
			"  public function __construct(array $configuration, $plugin_id, $plugin_definition, ClientInterface $client) {",
			"    parent::__construct($configuration, $plugin_id, $plugin_definition);",
			"    $this->client = $client;",
			"  }",
			"",
			"  /**",
			"   * {@inheritdoc}",
			"   */",
			"  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {",
			"    return new static(",
			"      $configuration,",
			"      $plugin_id,",
			"      $plugin_definition,",
			"      $container->get('http_client')",
			"    );",
			"  }",
			"",
			"  /**",
			"   * {@inheritdoc}",
			"   */",
			"  public function defaultConfiguration() {",
			"    return [",
			"    ];",
			"  }",
			"",
			"  /**",
			"   * {@inheritdoc}",
			"   */",
			"  public function blockForm($form, FormStateInterface $form_state) {",
			"    return $form;",
			"  }",
			"",
			"  /**",
			"   * {@inheritdoc}",
			"   */",
			"  public function blockSubmit($form, FormStateInterface $form_state) {",
			"    foreach ($this->defaultConfiguration() as $key => $value) {",
			"      $this->configuration[$key] = $form_state->getValue($key);",
			"    }",
			"  }",
			"",
			"  /**",
			"   * {@inheritdoc}",
			"   */",
			"  public function build() {",
			"    $config = $this->getConfiguration();",
			"",
			"    // Your code",
			"",
			"    $build['content'] = [",
			"      '#markup' => $this->t('Implement ${TM_FILENAME:NombreDelArchivo}.'),",
			"    ];",
			"",
			"    return $build;",
			"  }",
			"}"
		],
		"description": "Generate Drupal Mapa Block",
		"scope": "php"
	},
	"Drupal Twig Filter": {
		"prefix": "dtfilter",
		"body": [
			"namespace Drupal\\\\${1:nombre_del_modulo}\\\\TwigExtension;",
			"",
			"use Twig\\Extension\\AbstractExtension;",
			"use Twig\\TwigFilter;",
			"",
			"/**",
			" * Provides Twig Filter",
			" */",
			"class ${TM_FILENAME:NombreDelArchivo} extends AbstractExtension {",
			"  public function getFilters() {",
			"    return [",
			"      new TwigFilter('${1:id_del_filtro}', [",
			"        $this,",
			"        '${2:NombreDelMetodo}',",
			"      ]),",
			"    ];",
			"  }",
			"",
			"  public function ${2:NombreDelMetodo}($priceString): float {",
			"    // Tu codigo aqui",
			"  }",
			"}"
		],
		"description": "Generate Drupal Twig Filter",
		"scope": "php"
	},
	"Drupal Generador Controller": {
		"prefix": "dcontroller",
		"body": [
			"namespace Drupal\\\\${1:nombre_del_modulo}\\\\Controller;",
			"",
			"use Drupal\\Core\\Controller\\ControllerBase;",
			"",
			"use GuzzleHttp\\ClientInterface;",
			"use Symfony\\Component\\DependencyInjection\\ContainerInterface;",
			"",
			"/**",
			" * Descripcion del Controlador",
			" */",
			"class ${TM_FILENAME:NombreDelArchivo} extends ControllerBase {",
			"  /**",
			"   * @var \\GuzzleHttp\\ClientInterface $client",
			"   */",
			"  protected ClientInterface $client;",
			"",
			"  public function __construct(",
			"    ClientInterface $http_client,",
			"  ) {",
			"    $this->client = $http_client;",
			"  }",
			"",
			"  /**",
			"   * {@inheritdoc}",
			"   */",
			"  public static function create(ContainerInterface $container",
			"  ) {",
			"    return new static(",
			"      $container->get('http_client'),",
			"    );",
			"  }",
			"",
			"  public function build() {",
			"    return [];",
			"  }",
			"}"
		],
		"description": "Generate Drupal Generador Controller",
		"scope": "php"
	}
}
